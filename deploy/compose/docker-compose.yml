name: h3-spatial-cache-dev

services:
  postgis:
    image: postgis/postgis:16-3.4
    container_name: postgis
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # Check if db is connected
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5432:5432"
    volumes:
      - postgis-data:/var/lib/postgresql/data
      - ../../scripts/seed-postgis.sql:/docker-entrypoint-initdb.d/01-seed.sql:ro
    networks: [gisnet]

  geoserver:
    image: docker.osgeo.org/geoserver:2.27.2
    container_name: geoserver
    restart: unless-stopped
    depends_on:
      postgis:
        condition: service_healthy
    ports:
      - "${GEOSERVER_PORT}:8080"
    volumes:
      - geoserver-data:/opt/geoserver_data
    # Check that web ui is responding
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://127.0.0.1:8080/geoserver/web/ >/dev/null || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [gisnet]

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    # Run redis in in-memory mode
    command: >
      redis-server
      --save ""
      --appendonly no
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    # Check that container is up
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    networks: [gisnet]

  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    restart: unless-stopped
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: ${KAFKA_CLUSTER_ID}
    ports:
      - "9092:9092"
      - "29092:29092"
    # Test list kafka topics
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 30
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks: [gisnet]

  app:
    # Only runs when profile is enabled (so you can run it locally too)
    profiles: ["app"]
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    environment:
      GEOSERVER_URL: http://geoserver:8080/geoserver
      REDIS_ADDR: redis:6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      geoserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8090:8090"
    networks: [gisnet]

networks:
  gisnet:

volumes:
  postgis-data:
  geoserver-data:
  kafka-data:
